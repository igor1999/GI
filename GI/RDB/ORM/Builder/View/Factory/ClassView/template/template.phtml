<?php
    use GI\RDB\ORM\Builder\View\Factory\ClassView\ViewInterface;
    /** @var ViewInterface $this */
?>

<?php echo '<?php'; ?>

namespace <?php echo $this->getORMNamespace(); ?>\Factory;

use GI\RDB\ORM\Factory\AbstractFactory as Base;

<?php foreach ($this->getDriver()->getTableList()->getItems() as $table): ?>
    <?php
    $namespace = $this->getORMNamespace() . '\\' . $table->getNamespace();
    $alias     = $table->getAlias();
    ?>
use <?php echo $namespace; ?>\Record as <?php echo $alias; ?>\Record;
use <?php echo $namespace; ?>\Set as <?php echo $alias; ?>\Set;
<?php endforeach; ?>


<?php foreach ($this->getDriver()->getTableList()->getItems() as $table): ?>
    <?php
    $namespace = $this->getORMNamespace() . '\\' . $table->getNamespace();
    $alias     = $table->getAlias();
    ?>
use <?php echo $namespace; ?>\RecordInterface as <?php echo $alias; ?>\RecordInterface;
use <?php echo $namespace; ?>\SetInterface as <?php echo $alias; ?>\SetInterface;
<?php endforeach; ?>


/**
 * Class Factory
 * @package <?php echo $this->getORMNamespace(); ?>\Factory
 *
<?php foreach ($this->getDriver()->getTableList()->getItems() as $table): ?>
    <?php
    $alias  = $table->getAlias();
    $method = $table->getMethodCreator();
    ?>
* @method <?php echo $alias ?>RecordInterface <?php echo $method; ?>Record()
* @method <?php echo $alias ?>SetInterface <?php echo $method; ?>Set()
<?php endforeach; ?>
 */
class Factory extends Base implements FactoryInterface
{
    use <?php echo $this->getServiceLocatorTrait(); ?>;


    /**
     * Factory constructor.
     * @throws \Exception
     */
    public function __construct()
    {
        parent::__construct();

        $this
<?php foreach ($this->getDriver()->getTableList()->getItems() as $table): ?>
    <?php
    $alias = $table->getAlias();
    ?>
            ->setNamed('<?php echo $alias; ?>Record', <?php echo $alias; ?>Record::class)
            ->setNamed('<?php echo $alias; ?>Set', <?php echo $alias; ?>Set::class)
<?php endforeach; ?>
        ;
    }
}