<?php
    /** @noinspection PhpUnhandledExceptionInspection */
    use GI\RDB\ORM\Builder\View\Record\ClassView\ViewInterface;
    /** @var ViewInterface $this */
?>

namespace <?php echo $this->getBaseNamespace(), '\\', $this->getTable()->getNamespace(); ?>

use <?php echo $this->getBaseClass(); ?>

class Record extends <?php echo $this->getBaseClassShortName(); ?>
{

<?php foreach ($this->getTable()->getColumnList()->getItems() as $column) :?>
    /**
     * @var <?php echo $column->getPHPType(); ?>
     */
    private $<?php echo $column->getClassProperty(); ?>;

<?php endforeach;?>


<?php foreach ($this->getTable()->getColumnList()->getItems() as $column) :?>
    <?php
        $type         = $column->getPHPType();
        $property     = $column->getClassProperty();
        $getter       = $column->getClassGetter();
        $setter       = $column->getClassSetter();
        $setterAccess = $this->getAccess($column);
    ?>

    /**
     * @to-db <?php echo $column->getName(); ?>
     * @return <?php echo $type; ?>
     */
    public function <?php echo $getter; ?>()
    {
        return $this-><?php echo $property; ?>;
    }

    /**
     * @from-db <?php echo $column->getName(); ?>
     * @param <?php echo $type; ?> $<?php echo $property; ?>
     * @return static
     */
    <?php echo $setterAccess; ?> function <?php echo $setter; ?>(<?php echo $type; ?> $<?php echo $property; ?>)
    {
        $this-><?php echo $property; ?> = $<?php echo $property; ?>;

        return $this;
    }

<?php if ($column->isDatePHPType()): ?>
    /**
     * @return \DateTime
     */
    public function <?php echo $getter, 'AsDate'; ?>()
    {
        return new \DateTime($this-><?php echo $property; ?>); //todo get date in required format
    }
<?php endif;?>

<?php if ($column->isBoolPHPType()): ?>
    /**
     * @return bool
     */
    public function <?php echo $getter, 'AsBool'; ?>()
    {
        return (bool)$this-><?php echo $property; ?>;
    }
<?php endif;?>

<?php endforeach;?>
}