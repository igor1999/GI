<?php echo '<?php';?>

<?php
    use GI\RDB\ORM\Builder\View\Entity\Record\ClassView\ViewInterface;
    /** @var ViewInterface $this */
?>

namespace <?php echo $this->getORMNamespace(), '\\', $this->getTable()->getNamespace(); ?>;

use <?php echo $this->getBaseNamespace(); ?>\AbstractRecord as Base;

use GI\RDB\Meta\Table\TableInterface;

class Record extends Base implements RecordInterface
{
<?php foreach ($this->getTable()->getColumnList()->getItems() as $column) :?>
    /**
     * @var <?php echo $column->getPHPType(), PHP_EOL; ?>
     */
    private $<?php echo $column->getClassProperty(); ?>;

<?php endforeach;?>

    /**
     * @return TableInterface
     * @throws \Exception
     */
    public function getTable()
    {
        return $this->getDriver()->getTableList()->get('<?php echo $this->getTable()->getName(); ?>');
    }

<?php foreach ($this->getTable()->getColumnList()->getItems() as $column) :?>
<?php
    $name         = $column->getName();
    $type         = $column->getPHPType();
    $property     = $column->getClassProperty();
    $getter       = $column->getClassGetter();
    $setter       = $column->getClassSetter();
    $setterAccess = $this->getAccess($column);
?>
    /**
     * @to-db <?php echo $name, PHP_EOL; ?>
     * @return <?php echo $type, PHP_EOL; ?>
     */
    public function <?php echo $getter; ?>()
    {
        return $this-><?php echo $property; ?>;
    }

    /**
     * @from-db <?php echo $name, PHP_EOL; ?>
     * @param <?php echo $type; ?> $<?php echo $property, PHP_EOL; ?>
     * @return static
     */
    <?php echo $setterAccess; ?> function <?php echo $setter; ?>(<?php echo $type; ?> $<?php echo $property; ?>)
    {
        $this-><?php echo $property; ?> = $<?php echo $property; ?>;

        return $this;
    }
<?php if ($column->isDatePHPType()): ?>

    /**
     * @return \DateTime
     * @throws \Exception
     */
    public function <?php echo $getter; ?>AsDate()
    {
        return new \DateTime($this-><?php echo $property; ?>); //todo get date in required format
    }
<?php endif;?>
<?php if ($column->isBoolPHPType()): ?>

    /**
     * @return bool
     */
    public function <?php echo $getter; ?>AsBool()
    {
        return (bool)$this-><?php echo $property; ?>;
    }
<?php endif;?>

<?php endforeach;?>
}